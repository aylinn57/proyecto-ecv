# ==========================================
# PREDICCI√ìN DE PACIENTE NUEVO CON MODELO DE ECV
# Fabi√°n üöÄ
# ==========================================

import pandas as pd
import numpy as np
import joblib
from sklearn.preprocessing import StandardScaler

# 1Ô∏è‚É£ Cargar modelo entrenado
modelo = joblib.load('modelo_ecv_rf.pkl')
print("‚úÖ Modelo cargado correctamente.")

# 2Ô∏è‚É£ Definir los datos de un paciente nuevo
# ‚ö†Ô∏è Deben tener las MISMAS variables y en el MISMO orden que las usadas en el entrenamiento
# Aqu√≠ te pongo un ejemplo con variables "simuladas"

paciente_nuevo = pd.DataFrame({
    'age': [55],
    'sex': [1],            # 1=Hombre, 0=Mujer
    'cp': [3],             # Tipo de dolor en el pecho
    'trestbps': [140],     # Presi√≥n en reposo
    'chol': [250],         # Colesterol
    'fbs': [0],            # Glucosa en ayunas >120 mg/dl (1=True, 0=False)
    'restecg': [1],        # Resultados del ECG
    'thalach': [150],      # M√°ximo ritmo card√≠aco alcanzado
    'exang': [0],          # Angina inducida por ejercicio
    'oldpeak': [1.0],      # Depresi√≥n ST
    'slope': [2],          # Pendiente ST
    'ca': [0],             # N¬∞ de vasos coloreados
    'thal': [3]            # Resultado del esc√°ner de talio
})

print("\nüìã Datos del paciente nuevo:")
print(paciente_nuevo)

# 3Ô∏è‚É£ Aplicar mismo preprocesamiento (winsorizaci√≥n + escalado en las columnas necesarias)

# Primero winsorizamos las columnas correspondientes
def winsorize_series(series, lower=0.01, upper=0.99):
    q_low = series.quantile(lower)
    q_high = series.quantile(upper)
    return series.clip(q_low, q_high)

# Para el ejemplo, como solo es un paciente, no se calcula percentil real ‚Üí se omite winsorizaci√≥n (opcional en producci√≥n).

# 4Ô∏è‚É£ Est√°ndarizar las columnas num√©ricas como en el entrenamiento
columnas_a_escalar = ['age', 'trestbps', 'chol', 'thalach', 'oldpeak']

# ‚ö†Ô∏è Para que sea EXACTAMENTE igual, carga el scaler usado. Si no lo guardaste, aqu√≠ se puede reentrenar r√°pido (no es ideal pero funciona para test):
# Ideal: joblib.dump(scaler, 'scaler.pkl') ‚Üí luego cargarlo.
# Por ahora vamos a reescalar con el mismo fit:
df_entrenamiento = pd.read_csv('heart.csv')
df_entrenamiento['target'] = df_entrenamiento['num'].apply(lambda x: 1 if x > 0 else 0)
df_entrenamiento.drop(columns=['num'], inplace=True)
X_train = df_entrenamiento.drop(columns=['target'])

#scaler = StandardScaler()
#scaler.fit(X_train[columnas_a_escalar])

# Cargar scaler entrenado
scaler = joblib.load('scaler.pkl')
print("‚úÖ Scaler cargado correctamente.")

# Aplicar el escalado al paciente nuevo
paciente_nuevo[columnas_a_escalar] = scaler.transform(paciente_nuevo[columnas_a_escalar])

# 5Ô∏è‚É£ Hacer la predicci√≥n
prediccion = modelo.predict(paciente_nuevo)
probabilidad = modelo.predict_proba(paciente_nuevo)[0][1]  # Probabilidad de clase 1 (ECV)

# 6Ô∏è‚É£ Mostrar el resultado
print("\nüîÆ Predicci√≥n:")
if prediccion[0] == 1:
    print(f"‚ö†Ô∏è El modelo predice que este paciente TIENE RIESGO DE ECV. Probabilidad: {probabilidad:.2%}")
else:
    print(f"‚úÖ El modelo predice que este paciente NO tiene riesgo alto de ECV. Probabilidad: {probabilidad:.2%}")

# FIN
